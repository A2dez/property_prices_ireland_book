---
title: "Clean data"
format:
  html:
    toc: true
    html-math-method: katex
    css: styles.css
---

```{r}
#| echo: false
#| message: false
#| warning: false
library(lubridate)
library(viridis)
library(tidyr)
library(ggplot2)
library(plotly)
library(forcats)
library(scico)
library(stringr)
source('./utils/plot_theme.R')
source('1_read.R')
source('./utils/plot_theme.R')
source('./utils/vector_count_dfrm.R')
```

```{r}
#| echo: false
#| message: false
#| warning: false
#If you have run the script already, then this rds file will be used to
property_rds_filepath <- './data/property_raw_all_years_except_this_one.rds'
#Here's one I prepared earlier, containing postcode data for sales up to May 2021
#it is actually available at Kaggle: 
#https://www.kaggle.com/datasets/erinkhoo/property-price-register-ireland/data
postcode_data_path <- "Property_Price_Register_Ireland-28-05-2021.csv"
postcodes_dfrm_path <- "postcodes.rds"
property_data_url <- "https://www.propertypriceregister.ie/website/npsra/ppr/npsra-ppr.nsf/Downloads"
#create data folder for downloads

```

```{r}
#| echo: false
#| message: false
#| warning: false
property_raw <- read_property_prices(property_data_url, property_rds_filepath, first_year = 2023) 
postcode_dfrm <- read_postcode_data(postcodes_dfrm_path, postcode_data_path)


```

## Flipping hell: the absolute state of Ireland's property price index.

The property price index is a truly valuable resource which lists the price of every gaff sold in (the twenty-six counties of) Ireland since 2010. That's `r nrow(property_raw)` house sales at the time of writing. Unfortunately, the database was designed by people who 'know the price of everything but the value of nothing'. Allegedly, the data has been uploaded one entry at a time, by solicitors' secretaries, many of whom express their humanity through misspelling and irregular punctuation, while several express their Irishness with the *cÃºpla focail*. Understanding the data is thus a bit like being given a big five-bed house for a holiday but having to wade through the previous tenants' filth.

My role here is to take this unkempt raw data and flip it, scrubbing it goodo, and presenting it back to you, the reader, as an inhabitable space which, I hope, you can explore with some pleasure.

### What is contained in the data?

Let's have quick look at the last few rows.vect

```{r}
#| echo: false
#| message: false
#| warning: false
# head(property_raw)
tail(property_raw)
```

Each house sale has a date, a sale price, and an address, so that you can spy on your neighbours, or eye up the old price of a gaff you are interested in. If it has been sold since 2010. There is a useful column for the county so that we can divvy up the data into 26 important groups.

There is also some secondary data, such as whether the property was sold at the market price or not, whether VAT was charged, whether the house was new or second-hand. Occasionally a size category is included,roughly equating to tiny (\<38sq. m), large (\> 125 sq.m) or anything in-between.

We will look at each of these columns in turn and, in doing so, I will clean them up, before plotting the cleaner version of the data.

### Column names

The first thing to note is that the column names need cleaning as they were designed for humans to read rather than for people telling computers what to do.

```{r}
#| echo: false
#| message: false
#| warning: false
names(property_raw)

```

Spaces are an anathema to coders so they need to go and they can be replaced with underscore, where necessary. Lowercase letters are easier to code with, mostly, because you don't have to remember when you put capitals in. Ideally we'd just take the first word of the column, and we could rename the columns formulaically, e.g with a regex such as `.*?(?=\s|$)`, but the first word may not be the most important. 'Property Size Description' is better represented by 'size' than 'property' or 'description'. Thus we can rename the columns manually:

```{r}
#| echo: false
#| message: false
#| warning: false
property <- property_raw
(names(property) <-  c('date', 
                           'address', 
                           'county',
                           'eircode', 
                           'price', 
                           'market_price', 
                           'vat', 
                           'new', 
                           'size'))

property$province <- fct_collapse(property$county, 
             "Leinster" = c('Dublin', 'Laois', 'Meath', "Kilkenny", "Carlow", "Kildare", "Wicklow", 
                            'Wexford',  'Westmeath', 'Louth', 'Offaly'),
             "Munster" = c("Cork", 'Clare', 'Limerick', 'Tipperary', 'Waterford', 'Kerry'), 
             'Connacht-Ulster' = c('Galway', 'Longford','Sligo', 'Mayo', 'Leitrim', 'Roscommon', 'Donegal', 'Monaghan', 'Cavan') ,
               )
```

```{r}
# It should be noted that there are a few houses with eircodes befored 2020
 # property %>%
 #  filter(year < 2021, !is.na(eircode)) %>%
 #  View

# property_raw %>%
  # left_join(postcode_dfrm)
```

### Dates and sales

```{r}
#| echo: false
#| message: false
#| warning: false
property <-
  property %>% 
  #add new year, month (jan - dec), weekday (mon - sun), quarter with year
  mutate(date = dmy(date), 
         year = year(date),
         month = month(date, label = T),
         day = wday(date, label = T),
         quarter = quarter(date, with_year = T))

# property <- property %>% mutate(date = dmy(date))
#make date variables from sale_date
# property <-
#   property %>% 
#   #add new yeaar, month (jan - dec), weekday (mon - sun), quarter with year
#   mutate(date = dmy(date), 
#          year = year(date),
#          month = month(date, label = T),
#          day = wday(date, label = T),
#          quarter = quarter(date, with_year = T))
# # head(property, 500) %>% glimpse
# # postcode_dfrm <- postcode_dfrm %>% mutate(date = dmy(SALE_DATE))
# 
# postcode_dfrm$SALE_DATE[[1]] %>% ymd
# property_raw$date[1:10]
```

So the simplest thing to look at is how many properties have been sold each year since they started collecting the data.

```{r}

#| message: false
#| warning: false
annual_sales <- 
  property %>% 
  group_by(year) %>% 
  summarise(sales = n())
  # mutate(year = year %>% as.factor) %>% 
(annual_sales %>% 
  ggplot(aes(x = year  , 
             y = sales)) +
  geom_line(size = 2) +
  geom_point(size = 4, color = 'orange') +

    # scale_x_discrete() 
  scale_x_continuous(breaks = annual_sales$year) + #, position = "top" doeesn't work automatically in ggplotly
    #round max sales up to nearest 10k then add 5k for spacing
  scale_y_continuous(expand = c(0, 0), limits = c(0, max(annual_sales$sales) %>% round(digits = -4) + 5000)) +
  labs(title = 'Number of properties sold in Ireland each year, 2010-present', 
       y = '', x = '') +
  my_theme) %>% 
  ggplotly 



  
```
