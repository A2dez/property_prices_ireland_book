{
  "hash": "24fc052d06df5e73efdb7a1468e75b22",
  "result": {
    "markdown": "---\ntitle: \"Clean data\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(viridis)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: viridisLite\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'plotly'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n:::\n\n```{.r .cell-code}\nsource('./utils/plot_theme.R')\nsource('1_read.R')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'magrittr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    set_names\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tidyr':\n\n    extract\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#If you have run the script already, then this rds file will be used to\nproperty_rds_filepath <- './data/property_raw_all_years_except_this_one.rds'\n#Here's one I prepared earlier, containing postcode data for sales up to May 2021\n#it is actually available at Kaggle: \n#https://www.kaggle.com/datasets/erinkhoo/property-price-register-ireland/data\npostcode_data_path <- \"Property_Price_Register_Ireland-28-05-2021.csv\"\npostcodes_dfrm_path <- \"postcodes.rds\"\nproperty_data_url <- \"https://www.propertypriceregister.ie/website/npsra/ppr/npsra-ppr.nsf/Downloads\"\n#create data folder for downloads\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nproperty_raw <- read_property_prices(property_data_url, property_rds_filepath) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Data directory already exists!\"\n[1] \"Reading data from ./data/property_raw_all_years_except_this_one.rds\"\n[1] \"Reading data from  https://www.propertypriceregister.ie/website/npsra/ppr/npsra-ppr.nsf/Downloads/PPR-2023.csv/$FILE/PPR-2023.csv\"\n```\n:::\n\n```{.r .cell-code}\npostcode_dfrm <- read_postcode_data(postcodes_dfrm_path, postcode_data_path)\n```\n:::\n\n\n\n###Flipping hell: the absolute state of Ireland's property price index.\n\nThe property price index is a truly valuable resource which lists the price of every gaff sold in (the twenty-six counties of) Ireland since 2010. That's 630537 house sales at the time of writing. Unfortunately, the database was designed by people who 'know the price of everything but the value of nothing'. Allegedly, the data has been uploaded one entry at a time, by solicitors' secretaries, many of whom express their humanity through misspelling and irregular punctuation, while several express their Irishness with the *cÃºpla focail*. Understanding the data is thus a bit like being given a big five-bed house for a holiday but having to wade through the previous tenants' filth.\n\nMy role here is to take this unkempt raw data and flip it, scrubbing it goodo, and presenting it back to you, the reader, as an inhabitable space which, I hope, you can explore with some pleasure.\n\n###What is contained in the data?\n\nLet's have quick look at the first few rows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(property_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 9\n  `Date of Sale (dd/mm/yyyy)` Address            County Eircode `Price (\\u0080)`\n  <chr>                       <chr>              <chr>  <chr>   <chr>           \n1 01/01/2010                  5 Braemor Drive, ~ Dublin <NA>    \"\\u0080343,000.~\n2 03/01/2010                  134 Ashewood Walk~ Laois  <NA>    \"\\u0080185,000.~\n3 04/01/2010                  1 Meadow Avenue, ~ Dublin <NA>    \"\\u0080438,500.~\n4 04/01/2010                  1 The Haven, Morn~ Meath  <NA>    \"\\u0080400,000.~\n5 04/01/2010                  11 Melville Heigh~ Kilke~ <NA>    \"\\u0080160,000.~\n6 04/01/2010                  12 Sallymount Ave~ Dublin <NA>    \"\\u0080425,000.~\n# i 4 more variables: `Not Full Market Price` <chr>, `VAT Exclusive` <chr>,\n#   `Description of Property` <chr>, `Property Size Description` <chr>\n```\n:::\n:::\n\n\n\nEach house sale has a date, a sale price, and an address, so that you can spy on your neighbours, or eye up the old price of a gaff you are interested in. If it has been sold since 2010. There is a useful column for the county so that we can divvy up the data into 26 important groups, and there is some secondary data, such as whether the property was sold at the market price or not, whether VAT was charged, whether the house was new or second-hand. Occasionally a size category is included,roughly equating to tiny (\\<38sq. m), large (\\> 125 sq.m) or anything in-between.\n\nWe will look at each of these columns in turn and, in doing so, I will clean them up, before plotting the cleaner version of the data.\n\n###Column names\n\nThe first thing to note is that the column names need cleaning as they were designed for humans to read rather than for people telling computers what to do.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(property_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date of Sale (dd/mm/yyyy)\" \"Address\"                  \n[3] \"County\"                    \"Eircode\"                  \n[5] \"Price (\\u0080)\"            \"Not Full Market Price\"    \n[7] \"VAT Exclusive\"             \"Description of Property\"  \n[9] \"Property Size Description\"\n```\n:::\n:::\n\n\n\nSpaces are anathemous to coders so they need to go and they can be replaced with underscore, where necessary. Lowercase letters are easier to code with, mostly, because you don't have to remember when you put capitals in. Ideally we'd just take the first word of the column, and we could rename the columns formulaically, e.g with a regex such as `.*?(?=\\s|$)`, but the first word may not be the most important. 'Property Size Description' is better represented by 'size' than 'property' or 'description'. Thus we can rename the columns manually:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproperty <- property_raw\n(names(property) <-  c('date', \n                           'address', \n                           'county',\n                           'eircode', \n                           'price', \n                           'market_price', \n                           'vat', \n                           'description', \n                           'size'))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"date\"         \"address\"      \"county\"       \"eircode\"      \"price\"       \n[6] \"market_price\" \"vat\"          \"description\"  \"size\"        \n```\n:::\n:::\n\n\n\nRecent years have contained eircode data which is a great addition, but unfortunately that column has been added at the expense of an postcode column which, while sparsely populated and confined solely to Dublin, will remain a useful bit of data when we are trying to find which towns and villages belong in which part of Dublin.\n\nBefore we examine eircode data, we need to convert the 'date' column from a string to an actual date variable, and also extract the months, weeks, day and day of the week, as this may be valuable data for modelling later.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# property <- property %>% mutate(date = dmy(date))\n#make date variables from sale_date\nproperty <-\n  property %>% \n  #add new yeaar, month (jan - dec), weekday (mon - sun), quarter with year\n  mutate(date = dmy(date), \n         year = year(date),\n         month = month(date, label = T),\n         day = wday(date, label = T),\n         quarter = quarter(date, with_year = T))\n# head(property, 500) %>% glimpse\n# # postcode_dfrm <- postcode_dfrm %>% mutate(date = dmy(SALE_DATE))\n# \n# postcode_dfrm$SALE_DATE[[1]] %>% ymd\n# property_raw$date[1:10]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neircode_data <- property %>% \n  mutate(eircode_given = !is.na(eircode)) %>% \n  group_by(year) %>% \n  count(eircode_given, name = \"sales\") \n\neircode_data %>% \n  pivot_wider(names_from = eircode_given, \n              values_from = sales) %>% \n  arrange(year %>% desc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 x 3\n# Groups:   year [14]\n    year `FALSE` `TRUE`\n   <dbl>   <int>  <int>\n 1  2023   11411  38463\n 2  2022   14470  48077\n 3  2021   28958  30529\n 4  2020   49169    307\n 5  2019   58863    157\n 6  2018   57342     83\n 7  2017   54915     77\n 8  2016   49872     45\n 9  2015   49125     27\n10  2014   43615     29\n11  2013   30195     12\n12  2012   25364     NA\n13  2011   18437      1\n14  2010   20994     NA\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#To build the back-to-back barplot, we need to centre the data around zero\n#This can be done by multiplying the False scores by -1. \n#Below we need to change the values on the axis. \n(eircode_data %>% \n  mutate(sales = if_else(eircode_given == F, (sales * -1), sales), \n        `Eircode?` = if_else(eircode_given == T, 'Yes', 'No'),\n        year = year %>% factor) %>% \n  ggplot(aes(x = year,\n             y = sales, \n             fill = `Eircode?`)) +\n  geom_bar(stat = 'identity') + \n  #Much easier to read the effect we are looking at\n  coord_flip() +\n  #Viridis(2) is too yello and hard to read\n  scale_fill_manual(values = viridis(3)[1:2] ) +\n  #take the absolute value of the 'breaks' otherwise x-values would be negative\n  scale_y_continuous(labels = abs) +\n  labs(subtitle = \"How many eircodes were included in each year's sales data?\", \n       title = \"The rise of Eircodes\",\n       y = 'Number of houses sold in Ireland', \n       #my geography teacher would have docked me a mark for not labelling this axis, but the years are clearly years. \n       x = '') +\n  my_theme ) #%>%  ggplotly\n```\n\n::: {.cell-output-display}\n![](2_clean_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n  # theme(legend.position = 'none') #i debated removing this. \n```\n:::\n\n\n\nIt should be noted that there are a few houses with eircodes befored 2020\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n # property %>% \n #  filter(year < 2021, !is.na(eircode)) %>% \n #  View\n\n# property_raw %>% \n  # left_join(postcode_dfrm)\n```\n:::\n",
    "supporting": [
      "2_clean_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}